// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(uuid())
  wallet    String    @unique
  ensName   String? // ENS 可选昵称
  createdAt DateTime  @default(now())
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id          String @id @default(uuid())
  content     String
  ipfsHash    String
  contentHash String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String? // null 表示顶层评论
  replies  Comment[] @relation("CommentReplies")

  depth    Int // 当前嵌套深度，顶层为 0，子评论 +1
  threadId String // 所属主评论 ID（顶层为自身 id）

  tags  CommentTag[]
  votes Vote[]

  likesCount Int @default(0) // 点赞计数缓存，更新需注意事务处理

  createdAt DateTime @default(now())

  @@index([threadId])
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  comments  CommentTag[]
  createdAt DateTime     @default(now())
}

model CommentTag {
  id        String  @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     String

  @@unique([commentId, tagId])
}

model Vote {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
}

model Session {
  id        String   @id @default(uuid())
  wallet    String
  nonce     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([wallet])
}
